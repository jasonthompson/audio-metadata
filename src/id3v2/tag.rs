pub const TAGS: TagDictionary<'static> = TagDictionary {
    id_aenc: "Audio encryption",
    id_apic: "Attached picture",
    id_comm: "Comments",
    id_comr: "Commercial frame",
    id_encr: "Encryption method registration",
    id_equa: "Equalization",
    id_etco: "Event timing codes",
    id_geob: "General encapsulated object",
    id_grid: "Group identification registration",
    id_ipls: "Involved people list",
    id_link: "Linked information", 
    id_mcdi: "Music CD identifier",
    id_mllt: "MPEG location lookup table",
    id_owne: "Ownership frame",
    id_priv: "Private frame",
    id_pcnt: "Play counter",
    id_popm: "Popularimeter",
    id_poss: "Position synchronisation frame",
    id_rbuf: "Recommended buffer size",
    id_rvad: "Relative volume adjustment",
    id_rvrb: "Reverb",
    id_sylt: "Synchronized lyric/text",
    id_sytc: "Synchronized tempo codes",
    id_talb: "Album/Movie/Show title",
    id_tbpm: "BPM (beats per minute)",
    id_tcom: "Composer",
    id_tcon: "Content type",
    id_tcop: "Copyright message",
    id_tdat: "Date",
    id_tdly: "Playlist delay",
    id_tenc: "Encoded by",
    id_text: "Lyricist/Text writer",
    id_tflt: "File type",
    id_time: "Time",
    id_tit1: "Content group description",
    id_tit2: "Title/songname/content description",
    id_tit3: "Subtitle/Description refinement",
    id_tkey: "Initial key",
    id_tlan: "Language(s",
    id_tlen: "Length",
    id_tmed: "Media type",
    id_toal: "Original album/movie/show title",
    id_tofn: "Original filename",
    id_toly: "Original lyricist(s/text writer(s",
    id_tope: "Original artist(s/performer(s",
    id_tory: "Original release year",
    id_town: "File owner/licensee",
    id_tpe1: "Lead performer(s/Soloist(s",
    id_tpe2: "Band/orchestra/accompaniment",
    id_tpe3: "Conductor/performer refinement",
    id_tpe4: "Interpreted, remixed, or otherwise modified by",
    id_tpos: "Part of a set",
    id_tpub: "Publisher",
    id_trck: "Track number/Position in set",
    id_trda: "Recording dates",
    id_trsn: "Internet radio station name",
    id_trso: "Internet radio station owner",
    id_tsiz: "Size",
    id_tsrc: "ISRC (international standard recording code",
    id_tsse: "Software/Hardware and settings used for encoding",
    id_tyer: "Year",
    id_txxx: "User defined text information frame",
    id_ufid: "Unique file identifier",
    id_user: "Terms of use",
    id_uslt: "Unsychronized lyric/text transcription",
    id_wcom: "Commercial information",
    id_wcop: "Copyright/Legal information",
    id_woaf: "Official audio file webpage",
    id_woar: "Official artist/performer webpage",
    id_woas: "Official audio source webpage",
    id_wors: "Official internet radio station homepage",
    id_wpay: "Payment",
    id_wpub: "Publishers official webpage",
    id_wxxx: "User defined URL link frame",
};

pub fn get_tag_info(string: &str) -> Result<&str, &str> {
    match string {
        "AENC" => Ok(TAGS.id_aenc),
        "APIC" => Ok(TAGS.id_apic),
        "COMM" => Ok(TAGS.id_comm),
        "COMR" => Ok(TAGS.id_comr),
        "ENCR" => Ok(TAGS.id_encr),
        "EQUA" => Ok(TAGS.id_equa),
        "ETCO" => Ok(TAGS.id_etco),
        "GEOB" => Ok(TAGS.id_geob),
        "GRID" => Ok(TAGS.id_grid),
        "IPLS" => Ok(TAGS.id_ipls),
        "LINK" => Ok(TAGS.id_link),
        "MCDI" => Ok(TAGS.id_mcdi),
        "MLLT" => Ok(TAGS.id_mllt),
        "OWNE" => Ok(TAGS.id_owne),
        "PRIV" => Ok(TAGS.id_priv),
        "PCNT" => Ok(TAGS.id_pcnt),
        "POPM" => Ok(TAGS.id_popm),
        "POSS" => Ok(TAGS.id_poss),
        "RBUF" => Ok(TAGS.id_rbuf),
        "RVAD" => Ok(TAGS.id_rvad),
        "RVRB" => Ok(TAGS.id_rvrb),
        "SYLT" => Ok(TAGS.id_sylt),
        "SYTC" => Ok(TAGS.id_sytc),
        "TALB" => Ok(TAGS.id_talb),
        "TBPM" => Ok(TAGS.id_tbpm),
        "TCOM" => Ok(TAGS.id_tcom),
        "TCON" => Ok(TAGS.id_tcon),
        "TCOP" => Ok(TAGS.id_tcop),
        "TDAT" => Ok(TAGS.id_tdat),
        "TDLY" => Ok(TAGS.id_tdly),
        "TENC" => Ok(TAGS.id_tenc),
        "TEXT" => Ok(TAGS.id_text),
        "TFLT" => Ok(TAGS.id_tflt),
        "TIME" => Ok(TAGS.id_time),
        "TIT1" => Ok(TAGS.id_tit1),
        "TIT2" => Ok(TAGS.id_tit2),
        "TIT3" => Ok(TAGS.id_tit3),
        "TKEY" => Ok(TAGS.id_tkey),
        "TLAN" => Ok(TAGS.id_tlan),
        "TLEN" => Ok(TAGS.id_tlen),
        "TMED" => Ok(TAGS.id_tmed),
        "TOAL" => Ok(TAGS.id_toal),
        "TOFN" => Ok(TAGS.id_tofn),
        "TOLY" => Ok(TAGS.id_toly),
        "TOPE" => Ok(TAGS.id_tope),
        "TORY" => Ok(TAGS.id_tory),
        "TOWN" => Ok(TAGS.id_town),
        "TPE1" => Ok(TAGS.id_tpe1),
        "TPE2" => Ok(TAGS.id_tpe2),
        "TPE3" => Ok(TAGS.id_tpe3),
        "TPE4" => Ok(TAGS.id_tpe4),
        "TPOS" => Ok(TAGS.id_tpos),
        "TPUB" => Ok(TAGS.id_tpub),
        "TRCK" => Ok(TAGS.id_trck),
        "TRDA" => Ok(TAGS.id_trda),
        "TRSN" => Ok(TAGS.id_trsn),
        "TRSO" => Ok(TAGS.id_trso),
        "TSIZ" => Ok(TAGS.id_tsiz),
        "TSRC" => Ok(TAGS.id_tsrc),
        "TSSE" => Ok(TAGS.id_tsse),
        "TYER" => Ok(TAGS.id_tyer),
        "TXXX" => Ok(TAGS.id_txxx),
        "UFID" => Ok(TAGS.id_ufid),
        "USER" => Ok(TAGS.id_user),
        "USLT" => Ok(TAGS.id_uslt),
        "WCOM" => Ok(TAGS.id_wcom),
        "WCOP" => Ok(TAGS.id_wcop),
        "WOAF" => Ok(TAGS.id_woaf),
        "WOAR" => Ok(TAGS.id_woar),
        "WOAS" => Ok(TAGS.id_woas),
        "WORS" => Ok(TAGS.id_wors),
        "WPAY" => Ok(TAGS.id_wpay),
        "WPUB" => Ok(TAGS.id_wpub),
        "WXXX" => Ok(TAGS.id_wxxx),
        _ => Err("This isn't a tag"),
    }
}

pub struct TagDictionary<'a> {
    id_aenc: &'a str,
    id_apic: &'a str,
    id_comm: &'a str,
    id_comr: &'a str,
    id_encr: &'a str,
    id_equa: &'a str,
    id_etco: &'a str,
    id_geob: &'a str,
    id_grid: &'a str,
    id_ipls: &'a str,
    id_link: &'a str,
    id_mcdi: &'a str,
    id_mllt: &'a str,
    id_owne: &'a str,
    id_priv: &'a str,
    id_pcnt: &'a str,
    id_popm: &'a str,
    id_poss: &'a str,
    id_rbuf: &'a str,
    id_rvad: &'a str,
    id_rvrb: &'a str,
    id_sylt: &'a str,
    id_sytc: &'a str,
    id_talb: &'a str,
    id_tbpm: &'a str,
    id_tcom: &'a str,
    id_tcon: &'a str,
    id_tcop: &'a str,
    id_tdat: &'a str,
    id_tdly: &'a str,
    id_tenc: &'a str,
    id_text: &'a str,
    id_tflt: &'a str,
    id_time: &'a str,
    id_tit1: &'a str,
    id_tit2: &'a str,
    id_tit3: &'a str,
    id_tkey: &'a str,
    id_tlan: &'a str,
    id_tlen: &'a str,
    id_tmed: &'a str,
    id_toal: &'a str,
    id_tofn: &'a str,
    id_toly: &'a str,
    id_tope: &'a str,
    id_tory: &'a str,
    id_town: &'a str,
    id_tpe1: &'a str,
    id_tpe2: &'a str,
    id_tpe3: &'a str,
    id_tpe4: &'a str,
    id_tpos: &'a str,
    id_tpub: &'a str,
    id_trck: &'a str,
    id_trda: &'a str,
    id_trsn: &'a str,
    id_trso: &'a str,
    id_tsiz: &'a str,
    id_tsrc: &'a str,
    id_tsse: &'a str,
    id_tyer: &'a str,
    id_txxx: &'a str,
    id_ufid: &'a str,
    id_user: &'a str,
    id_uslt: &'a str,
    id_wcom: &'a str,
    id_wcop: &'a str,
    id_woaf: &'a str,
    id_woar: &'a str,
    id_woas: &'a str,
    id_wors: &'a str,
    id_wpay: &'a str,
    id_wpub: &'a str,
    id_wxxx: &'a str,
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_tags_lookup() {
        assert_eq!(super::TAGS.id_woar, "Office artist/performer webpage");
    }
}
